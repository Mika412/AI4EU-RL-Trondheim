# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import simulator_pb2 as simulator__pb2


class SimulatorStub(object):
    """Define the service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.start_simulation = channel.unary_unary(
                '/simulation.Simulator/start_simulation',
                request_serializer=simulator__pb2.InitRequest.SerializeToString,
                response_deserializer=simulator__pb2.StateResponse.FromString,
                )
        self.step = channel.unary_unary(
                '/simulation.Simulator/step',
                request_serializer=simulator__pb2.StepRequest.SerializeToString,
                response_deserializer=simulator__pb2.StateResponse.FromString,
                )


class SimulatorServicer(object):
    """Define the service
    """

    def start_simulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def step(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimulatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'start_simulation': grpc.unary_unary_rpc_method_handler(
                    servicer.start_simulation,
                    request_deserializer=simulator__pb2.InitRequest.FromString,
                    response_serializer=simulator__pb2.StateResponse.SerializeToString,
            ),
            'step': grpc.unary_unary_rpc_method_handler(
                    servicer.step,
                    request_deserializer=simulator__pb2.StepRequest.FromString,
                    response_serializer=simulator__pb2.StateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'simulation.Simulator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Simulator(object):
    """Define the service
    """

    @staticmethod
    def start_simulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/simulation.Simulator/start_simulation',
            simulator__pb2.InitRequest.SerializeToString,
            simulator__pb2.StateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def step(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/simulation.Simulator/step',
            simulator__pb2.StepRequest.SerializeToString,
            simulator__pb2.StateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
